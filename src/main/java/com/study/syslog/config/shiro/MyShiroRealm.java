package com.study.syslog.config.shiro;import com.study.syslog.entity.shiro.Permission;import com.study.syslog.entity.shiro.Role;import com.study.syslog.entity.shiro.User;import com.study.syslog.service.ILoginService;import org.apache.shiro.authc.AuthenticationException;import org.apache.shiro.authc.AuthenticationInfo;import org.apache.shiro.authc.AuthenticationToken;import org.apache.shiro.authc.SimpleAuthenticationInfo;import org.apache.shiro.authz.AuthorizationInfo;import org.apache.shiro.authz.SimpleAuthorizationInfo;import org.apache.shiro.realm.AuthorizingRealm;import org.apache.shiro.subject.PrincipalCollection;import org.springframework.beans.factory.annotation.Autowired;/** * @description: 实现AuthorizingRealm接口用户用户认证 * @date 2019/6/416:18 * @author myt_ac@163.com */public class MyShiroRealm extends AuthorizingRealm {    @Autowired    private ILoginService loginService;    /**     * 角色权限和对应权限添加     * @param principalCollection     * @return     */    @Override    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {        //获取登录用户名        String account= (String) principalCollection.getPrimaryPrincipal();        //查询用户名称        User user = loginService.findByAccount(account);        //添加角色和权限        SimpleAuthorizationInfo simpleAuthorizationInfo = new SimpleAuthorizationInfo();        for (Role role:user.getRoles()) {            //添加角色            simpleAuthorizationInfo.addRole(role.getRoleName());            for (Permission permission:role.getPermissions()) {                //添加权限                simpleAuthorizationInfo.addStringPermission(permission.getPermission());            }        }        return simpleAuthorizationInfo;    }    /**     * 认证     * @param authenticationToken     * @return     * @throws AuthenticationException     */    @Override    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {        //加这一步的目的是在Post请求的时候会先进认证，然后在到请求        if (authenticationToken.getPrincipal() == null) {            return null;        }        //获取用户信息        String account = authenticationToken.getPrincipal().toString();        User user = loginService.findByAccount(account);        if (user == null) {            //这里返回后会报出对应异常            return null;        } else {            //这里验证authenticationToken和simpleAuthenticationInfo的信息            SimpleAuthenticationInfo simpleAuthenticationInfo = new SimpleAuthenticationInfo(user, user.getPassword(), getName());            return simpleAuthenticationInfo;        }    }}